name: deploy model from stage to production on dispatch

on:
  workflow_dispatch:
    inputs:
      eval_metric:  
        description: "어떤 지표를 기준으로 운영 모델을 등록하시겠습니까?"
        required: true
        default: "Loss"
        type: choice
        options:
          - "Loss"
          - "Accuracy"
          - "F1"
          - "Recall"
          - "Precision"

jobs:
  run_triggered_job:
    runs-on: [self-hosted, linux, X64]
    outputs:
      deploy_stage: ${{ github.event.inputs.deploy_stage }}  
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: 디버그 로그 보기
      run: |
        echo "GITHUB_ACTIONS_DEBUG=true" >> $GITHUB_ENV

    - name: git pull
      run: |
        cd /home/ubuntu/flatfix
        git pull
        
    - name: 필요 컨테이너 띄우기
      run: |
        cd /home/ubuntu/flatfix
        docker compose up --build -d
        
    - name: 운영 모델 결정
      run: docker run --gpus all --network flatfix_mlflow-network --rm flatfix-train-model python main.py Produce ${{ github.event.inputs.eval_metric }}

    #  3번 서버에 진입해서 Streamlit, Flask, Postgre 컨테이너 Up 하기 
    - name: 3번 서버로 SSH 접속해서 Streamlit, Flask 컨테이너 띄우기 
      uses: appleboy/ssh-action@v0.1.9
      with:
        host: ${{ secrets.SERVER_3_HOST }}         # 3번 서버의 IP나 도메인
        username: ${{ secrets.SERVER_3_USER }}     # 3번 서버 접속 유저명
        key: ${{ secrets.SERVER_3_SSH_KEY }}       # GitHub Secrets에 저장된 SSH 프라이빗 키
        port: 22                                   # 기본 SSH 포트 
        script: |  # Streamlit, Flask, Postgre 컨테이너 띄우기
          cd /home/ubuntu/deployment/coc-model/deployment
          docker compose up --build -d                  
    
